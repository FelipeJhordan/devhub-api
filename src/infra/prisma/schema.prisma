// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String    @db.VarChar(300)
  Post      Post[]
  Comment   Comment[]
  Like      Like[]
  Session   Session?
  Profile   Profile?
  Following Follow[]  @relation("following")
  Follower  Follow[]  @relation("follower")

  recovery_code String? @db.VarChar(10)

  @@map("users")
}

model Profile {
  id       Int        @id @default(autoincrement())
  name     String
  birth    DateTime
  photo    String?
  user     User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id  Int        @unique
  language Language[] @relation("profile_languages")

  @@map("profiles")
}

model Language {
  id      Int       @id @default(autoincrement())
  name    String
  profile Profile[] @relation("profile_languages")

  @@map("languages")
}

model Session {
  id      Int    @id @default(autoincrement())
  token   String @db.VarChar(400)
  user    User   @relation(fields: [user_id], references: [id])
  user_id Int    @unique

  @@map("sessions")
}

model Post {
  id         Int       @id @default(autoincrement())
  content    String
  created_at DateTime  @default(now())
  user       User      @relation(fields: [user_id], references: [id])
  user_id    Int
  Comment    Comment[]
  Like       Like[]

  @@map("posts")
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    Int
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id    Int
  Like       Like[]

  @@map("comments")
}

model Like {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    Int
  post       Post?    @relation(fields: [post_id], references: [id])
  post_id    Int?
  comment    Comment? @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  comment_id Int?

  @@map("likes")
}

model Follow {
  follower     User @relation("follower", fields: [follower_id], references: [id], onDelete: Cascade)
  follower_id  Int
  following    User @relation("following", fields: [following_id], references: [id], onDelete: Cascade)
  following_id Int

  @@id([follower_id, following_id])
  @@map("follows")
}
